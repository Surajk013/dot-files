# Autogenerated config.py
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# turn off autoplay for any media 
config.set("content.autoplay", False)

# enable dark mode always
config.set("colors.webpage.darkmode.enabled", True)

# Accept all cookies for chrome-devtools and devtools
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')
config.set('content.cookies.accept', 'all', 'devtools://*')

# Set Accept-Language header for specific URL
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# Set User-Agent for specific URLs
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# Load images automatically for devtools and chrome-devtools
config.set('content.images', True, 'chrome-devtools://*')
config.set('content.images', True, 'devtools://*')

# Enable JavaScript for various URLs
config.set('content.javascript.enabled', True, 'chrome-devtools://*')
config.set('content.javascript.enabled', True, 'devtools://*')
config.set('content.javascript.enabled', True, 'chrome://*/*')
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/suraj/.local/share/qutebrowser/userscripts/*')

# Block notifications except for WhatsApp
config.set('content.notifications.enabled', True, 'https://web.whatsapp.com')

# Desktop notifications for Gmail
config.set('content.notifications.enabled', True, 'https://mail.google.com/*')

# Enable always mailto protocol for Gmail
config.set('content.register_protocol_handler', True, 'mailto')

# Auto-save session
c.auto_save.session = True

# Set default search engines
c.url.searchengines = {
    'DEFAULT': 'https://duckduckgo.com/?t=h_&q={}&ia=web',
    'gg': 'https://www.google.com/search?q={}',
    'ddg': 'https://www.duckduckgo.com/search?q={}',
    'bing': 'https://www.bing.com/search?q={}'
}

# Set default page
c.url.default_page = 'https://www.google.com/'

# Set adblock lists
adblock_lists = [
    'https://easylist.to/easylist/easylist.txt',
    'https://easylist.to/easylist/easyprivacy.txt',
    'https://secure.fanboy.co.nz/fanboy-annoyance.txt',
    'https://raw.githubusercontent.com/uBlockOrigin/uAssets/master/filters/filters-2023.txt',
    'https://raw.githubusercontent.com/bogachenko/fuckfuckadblock/master/fuckfuckadblock.txt',
    'https://easylist.to/easylist/fanboy-social.txt',
]
c.content.blocking.adblock.lists = adblock_lists

# Key bindings
config.bind('<Alt-Left>', 'back')
config.bind('<Alt-Right>', 'forward')
config.bind('pt', 'tab-pin')
config.bind('<Ctrl-Right>', 'tab-next')
config.bind('<Ctrl-Left>', 'tab-prev')
config.bind('<Ctrl-n>', 'spawn --detach qutebrowser --temp-basedir')
config.bind('<Shift-Right>', 'tab-move +1')
config.bind('<Shift-Left>', 'tab-move -1')
config.bind(',b', 'config-cycle content.blocking.enabled true false')
config.bind('xd', 'config-cycle colors.webpage.darkmode.enabled')
config.bind('<ctrl-m>', 'hint links spawn mpv {hint-url}')
config.bind('<ctrl-w>', 'hint links spawn mpv --ytdl-format=worst {hint-url}')
config.bind('ZZ', 'hint links spawn kitty -e yt-dlp {hint-url}')
config.bind('XX', 'config-cycle statusbar.show always never ;; config-cycle tabs.show always never')

# Youtube ad blocking
from qutebrowser.api import interceptor

def filter_yt(info: interceptor.Request):
    """Block the given request if necessary."""
    url = info.request_url
    if (
        url.host() == "www.youtube.com"
        and url.path() == "/get_video_info"
        and "&adformat=" in url.query()
    ):
        info.block()

interceptor.register(filter_yt)

# Set the opacity for the web content
# c.colors.webpage.bg = 'rgba(255, 255, 255, 0.9)'  # 90% opacity background
# Set the opacity for the window itself
c.window.transparent = False

c.fonts.default_family='Jetbrains mono semibold'
c.fonts.default_size='10pt'